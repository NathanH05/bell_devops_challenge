name: DevOps Challenge Setup

on:
  push:
    branches:
      - main
      - feat/ansible-devops-vm

jobs:
  setup-ec2-instance:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check for Existing EC2 Instance
        id: check-ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" \
                      "Name=tag:Name,Values=DevOpsChallengeInstance" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)

          if [ "$INSTANCE_ID" == "None" ]; then
            echo "No existing instance found. Launching a new one..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0c614dee691cbbf37 \
              --instance-type t2.micro \
              --key-name ${{ secrets.AWS_SSH_KEY_NAME }} \
              --security-group-ids sg-04f1d951ea95c14f2 \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=DevOpsChallengeInstance}]' \
              --query 'Instances[0].InstanceId' \
              --output text)
          else
            echo "Using existing EC2 Instance: $INSTANCE_ID"
          fi

          echo "::set-output name=instance_id::$INSTANCE_ID"

      - name: Wait for EC2 Instance to be Running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ steps.check-ec2.outputs.instance_id }}

      - name: Get EC2 Instance Public DNS
        id: ec2-dns
        run: |
          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids ${{ steps.check-ec2.outputs.instance_id }} --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          echo "EC2 Instance Public DNS: $PUBLIC_DNS"
          echo "::set-output name=public_dns::$PUBLIC_DNS"

      - name: Install Ansible on EC2 Instance
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ steps.ec2-dns.outputs.public_dns }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            sudo yum update -y
            sudo yum install -y ansible
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            sudo systemctl enable amazon-ssm-agent
            sudo systemctl start amazon-ssm-agent

      - name: Configure SSH for Ansible
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          cat >> ansible_inventory.ini <<EOL
          [ec2-instance]
          ${{ steps.ec2-dns.outputs.public_dns }} ansible_user=ec2-user ansible_ssh_private_key_file=private_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOL

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible_inventory.ini playbook.yml

      - name: Save SSH key to a file
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > /tmp/aws_ssh_key.pem
          chmod 600 /tmp/aws_ssh_key.pem  # Set proper permissions for the key file

      - name: Run InSpec tests on EC2 instance
        run: |
          aws ssm send-command --document-name "AWS-RunInspecChecks" \
          --document-version "1" \
          --targets '[{"Key":"tag:Name","Values":["DevOpsChallengeInstance"]}]' \
          --parameters '{"sourceType":["GitHub"],"sourceInfo":["{\"owner\":\"NathanH05\", \"repository\":\"bell_devops_challenge\", \"path\": \"tests/inspec/bell_challenge.rb\",\"getOptions\":\"branch:main\"}"]}' \
          --timeout-seconds 600 --max-concurrency "50" --max-errors "0" \
          --cloud-watch-output-config '{"CloudWatchLogGroupName":"test","CloudWatchOutputEnabled":true}' \
          --region us-east-1

      - name: Show summarized inspect tests
        run: |
          aws ssm list-resource-compliance-summaries --filters Key=ComplianceType,Values=Custom:Inspec
